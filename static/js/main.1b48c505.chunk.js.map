{"version":3,"sources":["types/Fill.js","types/Wraps.js","utils/getRandom.js","utils/getId.js","utils/getRandomShapes.js","types/Shape.js","utils/setCorrectShape.js","utils/shuffle.js","components/App/App.js","components/Flower/Flower.js","components/Leaf/Leaf.js","reportWebVitals.js","index.js"],"names":["Fill","Wraps","getRandom","min","max","Math","random","getId","toString","randomDataMap","randomDataValues","randomPropertyName","getRandomShapes","items","dataValues","map","x","arr","result","counter","length","index","floor","temp","shuffle","randomPropertyIndex","randomValueIndex","id","shape","fill","wrap","correct","selected","forEach","values","xi","y","yi","some","ComponentsMap","flower","props","className","cn","shaded","rounded","leaf","App","state","this","setState","setTimeout","newRound","Component","onClick","handleSymbolCheck","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b48c505.chunk.js","sourcesContent":["export const Fill = {\r\n  Empty: 'empty',\r\n  Shaded: 'shaded',\r\n};\r\n","export const Wraps = {\r\n  Empty: 'empty',\r\n  Rounded: 'rounded',\r\n};\r\n","export const getRandom = (min, max) => {\r\n  return ((Math.random() * (max - min + 1)) >> 0) + min;\r\n};\r\n","export const getId = () => {\r\n  return `f${(~~(Math.random()*1e8)).toString(16)}`;\r\n};\r\n","import { Shapes } from '../types/Shape';\r\nimport { Fill } from '../types/Fill';\r\nimport { Wraps } from '../types/Wraps';\r\nimport { getRandom } from './getRandom';\r\nimport { getId } from './getId';\r\nimport { shuffle } from './shuffle';\r\nimport { setCorrectShape } from './setCorrectShape';\r\n\r\nconst randomDataMap = {\r\n  '0': { // Shapes\r\n    '0': Shapes.Flower,\r\n    '1': Shapes.Leaf,\r\n  },\r\n  '1': { // Fill\r\n    '0': Fill.Empty,\r\n    '1': Fill.Shaded,\r\n  },\r\n  '2': { // Wraps\r\n    '0': Wraps.Empty,\r\n    '1': Wraps.Rounded,\r\n  },\r\n};\r\n\r\nconst randomDataValues = [\r\n  [ 0, 0, 1, 1 ], // Shapes\r\n  [ 0, 0, 1, 1 ], // Fill\r\n  [ 0, 0, 1, 1 ], // Wraps\r\n];\r\n\r\nconst randomPropertyName = {\r\n  '0': 'shape',\r\n  '1': 'fill',\r\n  '2': 'wrap',\r\n};\r\n\r\nexport const getRandomShapes = () => {\r\n  const dataValues = [ ...randomDataValues.map(x => shuffle(x)) ],\r\n    randomPropertyIndex = getRandom(0, 2),\r\n    randomValueIndex = getRandom(0, 3);\r\n\r\n  const result = [{\r\n    id: getId(),\r\n    shape: '',\r\n    fill: '',\r\n    wrap: '',\r\n    correct: false,\r\n    selected: false,\r\n  }, {\r\n    id: getId(),\r\n    shape: '',\r\n    fill: '',\r\n    wrap: '',\r\n    correct: false,\r\n    selected: false,\r\n  }, {\r\n    id: getId(),\r\n    shape: '',\r\n    fill: '',\r\n    wrap: '',\r\n    correct: false,\r\n    selected: false,\r\n  }, {\r\n    id: getId(),\r\n    shape: '',\r\n    fill: '',\r\n    wrap: '',\r\n    correct: false,\r\n    selected: false,\r\n  }];\r\n\r\n  dataValues.forEach((values, xi) => {\r\n    values.forEach((y, yi) => {\r\n      result[yi][randomPropertyName[xi]] = dataValues[xi][yi];\r\n      if (randomPropertyIndex === xi && randomValueIndex === yi) {\r\n        result[yi][randomPropertyName[xi]] ^= 1;\r\n      }\r\n      result[yi][randomPropertyName[xi]] = randomDataMap[xi][result[yi][randomPropertyName[xi]]];\r\n    });\r\n  });\r\n\r\n  return setCorrectShape(result);\r\n};\r\n","export const Shapes = {\r\n  Flower: 'flower',\r\n  Leaf: 'leaf',\r\n};\r\n","export const setCorrectShape = (items) => {\r\n  return items.map(x => {\r\n    x.correct = !items.some(y => y.id !== x.id && y.shape === x.shape)\r\n      || !items.some(y => y.id !== x.id && y.fill === x.fill)\r\n      || !items.some(y => y.id !== x.id && y.wrap === x.wrap);\r\n    return x;\r\n  });\r\n};\r\n","export const shuffle = (arr) => {\r\n  const result = [ ...arr ];\r\n  let counter = result.length;\r\n\r\n  // While there are elements in the array\r\n  while (counter > 0) {\r\n    // Pick a random index\r\n    let index = Math.floor(Math.random() * counter);\r\n\r\n    // Decrease counter by 1\r\n    counter--;\r\n\r\n    // And swap the last element with it\r\n    let temp = result[counter];\r\n    result[counter] = result[index];\r\n    result[index] = temp;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import React, { Component } from 'react';\nimport * as cn from 'classnames';\nimport './App.css';\nimport { Flower } from '../Flower';\nimport { Leaf } from '../Leaf';\nimport { getRandomShapes } from '../../utils/getRandomShapes';\nimport { Fill } from '../../types/Fill';\nimport { Wraps } from '../../types/Wraps';\n\nconst ComponentsMap = {\n  flower: Flower,\n  leaf: Leaf,\n};\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: getRandomShapes(),\n    };\n  }\n\n  handleSymbolCheck(id) {\n    this.setState({\n      items: this.state.items.map(x => {\n        const result = { ...x };\n        if (result.id === id || result.correct === true) {\n          result.selected = true;\n        }\n\n        return result;\n      }),\n    }, () => setTimeout(() => this.newRound(), 1000));\n  }\n\n  newRound() {\n    this.setState({\n      items: getRandomShapes(),\n    });\n  }\n\n  render() {\n    return (\n      <div className={'app'}>\n        <div className={'description'}>\n          Mistcaller Puzzle contains three different options to generate a symbol: Shape, Shade, Border.<br />\n          Possible shapes values: Flower, Leaf.<br />\n          Possible shade values: Transparent, Shaded.<br />\n          Possible border values: No border, Border.<br />\n        </div>\n        <div className={'shapes'}>\n          {\n            this.state.items.map(x => {\n              const Component = ComponentsMap[x.shape],\n                props = {\n                  shaded: x.fill === Fill.Shaded,\n                  rounded: x.wrap === Wraps.Rounded,\n                };\n\n              return (\n                <div key={x.id} className={cn('shape', {\n                  selected: x.selected,\n                  correct: x.correct,\n                })} onClick={() => this.handleSymbolCheck(x.id)}>\n                  <Component { ...props } />\n                </div>\n              );\n            })\n          }\n        </div>\n        <div className={'description'}>\n          Unique symbol means that another symbols have different values for only one of options.<br />\n          Examples: Only one flower, only one with shade or only one without border.<br />\n          <br />\n          Try to find a unique one!<br />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\nimport * as cn from 'classnames';\r\nimport './Flower.css';\r\n\r\nexport const Flower = (props) => {\r\n  return (\r\n    <div className={cn('flower', { 'shaded': props.shaded })}>\r\n      <div className={cn({ 'circle': props.rounded })} />\r\n      <div className={'flower-inner'}>\r\n        <div className={'petal'} />\r\n        <div className={'petal'} />\r\n        <div className={'petal'} />\r\n        <div className={'petal'} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport * as cn from 'classnames';\r\nimport './Leaf.css';\r\n\r\nexport const Leaf = (props) => {\r\n  return (\r\n    <div className={cn('leaf', { 'shaded': props.shaded })}>\r\n      <div className={cn({ 'circle': props.rounded })} />\r\n      <div className={'leaf-inner'} />\r\n    </div>\r\n  );\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}